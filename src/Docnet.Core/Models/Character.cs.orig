using System;

namespace Docnet.Core.Models
{
    public struct Character : IEquatable<Character>
<<<<<<< HEAD
    {
        public char Char { get; set; }
=======
    {
        private const double Tolerance = 0.001;

        public char Char { get; }
>>>>>>> master

        public BoundBox Box { get; set; }

<<<<<<< HEAD
        public BoundBox LooseBox { get; set;  }

        public float Angle { get; set; }

        public double FontSize { get; set; }

        public double OriginX { get; set; }

        public double OriginY { get; set; }

        public int PageRotation { get; set; }

        public Character(char character, double fontSize, float angle, BoundBox box, BoundBox looseBox, double originX, double originY, int pageRot)
=======
        public float Angle { get; }

        public double FontSize { get; }

        public Character(char character, BoundBox box, float angle, double fontSize)
>>>>>>> master
        {
            Char = character;
            FontSize = fontSize;
            Box = box;
<<<<<<< HEAD
            LooseBox = looseBox;
            Angle = angle;
            OriginX = originX;
            OriginY = originY;
            PageRotation = pageRot;
=======
            Angle = angle;
            FontSize = fontSize;
>>>>>>> master
        }

        public static bool operator ==(Character obj1, Character obj2)
        {
            return obj1.Equals(obj2);
        }

        public static bool operator !=(Character obj1, Character obj2)
        {
            return !(obj1 == obj2);
        }

        public bool Equals(Character other)
        {
            return Char == other.Char
                   && Box.Equals(other.Box)
                   && Math.Abs(Angle - other.Angle) < Tolerance
                   && Math.Abs(FontSize - other.FontSize) < Tolerance;
        }

        public override bool Equals(object obj)
        {
            if (!(obj is Character))
            {
                return false;
            }

            var character = (Character)obj;

            return Equals(character);
        }

        public override int GetHashCode()
        {
            var hashCode = 13;
            hashCode = hashCode * 7 + Char.GetHashCode();
            hashCode = hashCode * 7 + Box.GetHashCode();
            return hashCode;
        }
    }
}